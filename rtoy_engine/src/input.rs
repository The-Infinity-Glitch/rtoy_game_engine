use bitflags::bitflags;
use glfw;

#[derive(Debug)]
pub enum KeyboardKey {
    Space,
    Apostrophe,
    Comma,
    Minus,
    Period,
    Slash,
    Num0,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Semicolon,
    Equal,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    LeftBracket,
    Backslash,
    RightBracket,
    GraveAccent,
    World1,
    World2,
    Escape,
    Enter,
    Tab,
    Backspace,
    Insert,
    Delete,
    Right,
    Left,
    Down,
    Up,
    PageUp,
    PageDown,
    Home,
    End,
    CapsLock,
    ScrollLock,
    NumLock,
    PrintScreen,
    Pause,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    F25,
    Kp0,
    Kp1,
    Kp2,
    Kp3,
    Kp4,
    Kp5,
    Kp6,
    Kp7,
    Kp8,
    Kp9,
    KpDecimal,
    KpDivide,
    KpMultiply,
    KpSubtract,
    KpAdd,
    KpEnter,
    KpEqual,
    LeftShift,
    LeftControl,
    LeftAlt,
    LeftSuper,
    RightShift,
    RightControl,
    RightAlt,
    RightSuper,
    Menu,
    Unknown,
}

impl KeyboardKey {
    pub fn from_glfw(input: glfw::Key) -> Self {
        match input {
            glfw::Key::Space => Self::Space,
            glfw::Key::Apostrophe => Self::Apostrophe,
            glfw::Key::Comma => Self::Comma,
            glfw::Key::Minus => Self::Minus,
            glfw::Key::Period => Self::Period,
            glfw::Key::Slash => Self::Slash,
            glfw::Key::Num0 => Self::Num0,
            glfw::Key::Num1 => Self::Num1,
            glfw::Key::Num2 => Self::Num2,
            glfw::Key::Num3 => Self::Num3,
            glfw::Key::Num4 => Self::Num4,
            glfw::Key::Num5 => Self::Num5,
            glfw::Key::Num6 => Self::Num6,
            glfw::Key::Num7 => Self::Num7,
            glfw::Key::Num8 => Self::Num8,
            glfw::Key::Num9 => Self::Num9,
            glfw::Key::Semicolon => Self::Semicolon,
            glfw::Key::Equal => Self::Equal,
            glfw::Key::A => Self::A,
            glfw::Key::B => Self::B,
            glfw::Key::C => Self::C,
            glfw::Key::D => Self::D,
            glfw::Key::E => Self::E,
            glfw::Key::F => Self::F,
            glfw::Key::G => Self::G,
            glfw::Key::H => Self::H,
            glfw::Key::I => Self::I,
            glfw::Key::J => Self::J,
            glfw::Key::K => Self::K,
            glfw::Key::L => Self::L,
            glfw::Key::M => Self::M,
            glfw::Key::N => Self::N,
            glfw::Key::O => Self::O,
            glfw::Key::P => Self::P,
            glfw::Key::Q => Self::Q,
            glfw::Key::R => Self::R,
            glfw::Key::S => Self::S,
            glfw::Key::T => Self::T,
            glfw::Key::U => Self::U,
            glfw::Key::V => Self::V,
            glfw::Key::W => Self::W,
            glfw::Key::X => Self::X,
            glfw::Key::Y => Self::Y,
            glfw::Key::Z => Self::Z,
            glfw::Key::LeftBracket => Self::LeftBracket,
            glfw::Key::Backslash => Self::Backslash,
            glfw::Key::RightBracket => Self::RightBracket,
            glfw::Key::GraveAccent => Self::GraveAccent,
            glfw::Key::World1 => Self::World1,
            glfw::Key::World2 => Self::World2,
            glfw::Key::Escape => Self::Escape,
            glfw::Key::Enter => Self::Enter,
            glfw::Key::Tab => Self::Tab,
            glfw::Key::Backspace => Self::Backspace,
            glfw::Key::Insert => Self::Insert,
            glfw::Key::Delete => Self::Delete,
            glfw::Key::Right => Self::Right,
            glfw::Key::Left => Self::Left,
            glfw::Key::Down => Self::Down,
            glfw::Key::Up => Self::Up,
            glfw::Key::PageUp => Self::PageUp,
            glfw::Key::PageDown => Self::PageDown,
            glfw::Key::Home => Self::Home,
            glfw::Key::End => Self::End,
            glfw::Key::CapsLock => Self::CapsLock,
            glfw::Key::ScrollLock => Self::ScrollLock,
            glfw::Key::NumLock => Self::NumLock,
            glfw::Key::PrintScreen => Self::PrintScreen,
            glfw::Key::Pause => Self::Pause,
            glfw::Key::F1 => Self::F1,
            glfw::Key::F2 => Self::F2,
            glfw::Key::F3 => Self::F3,
            glfw::Key::F4 => Self::F4,
            glfw::Key::F5 => Self::F5,
            glfw::Key::F6 => Self::F6,
            glfw::Key::F7 => Self::F7,
            glfw::Key::F8 => Self::F8,
            glfw::Key::F9 => Self::F9,
            glfw::Key::F10 => Self::F10,
            glfw::Key::F11 => Self::F11,
            glfw::Key::F12 => Self::F12,
            glfw::Key::F13 => Self::F13,
            glfw::Key::F14 => Self::F14,
            glfw::Key::F15 => Self::F15,
            glfw::Key::F16 => Self::F16,
            glfw::Key::F17 => Self::F17,
            glfw::Key::F18 => Self::F18,
            glfw::Key::F19 => Self::F19,
            glfw::Key::F20 => Self::F20,
            glfw::Key::F21 => Self::F21,
            glfw::Key::F22 => Self::F22,
            glfw::Key::F23 => Self::F23,
            glfw::Key::F24 => Self::F24,
            glfw::Key::F25 => Self::F25,
            glfw::Key::Kp0 => Self::Kp0,
            glfw::Key::Kp1 => Self::Kp1,
            glfw::Key::Kp2 => Self::Kp2,
            glfw::Key::Kp3 => Self::Kp3,
            glfw::Key::Kp4 => Self::Kp4,
            glfw::Key::Kp5 => Self::Kp5,
            glfw::Key::Kp6 => Self::Kp6,
            glfw::Key::Kp7 => Self::Kp7,
            glfw::Key::Kp8 => Self::Kp8,
            glfw::Key::Kp9 => Self::Kp9,
            glfw::Key::KpDecimal => Self::KpDecimal,
            glfw::Key::KpDivide => Self::KpDivide,
            glfw::Key::KpMultiply => Self::KpMultiply,
            glfw::Key::KpSubtract => Self::KpSubtract,
            glfw::Key::KpAdd => Self::KpAdd,
            glfw::Key::KpEnter => Self::KpEnter,
            glfw::Key::KpEqual => Self::KpEqual,
            glfw::Key::LeftShift => Self::LeftShift,
            glfw::Key::LeftControl => Self::LeftControl,
            glfw::Key::LeftAlt => Self::LeftAlt,
            glfw::Key::LeftSuper => Self::LeftSuper,
            glfw::Key::RightShift => Self::RightShift,
            glfw::Key::RightControl => Self::RightControl,
            glfw::Key::RightAlt => Self::RightAlt,
            glfw::Key::RightSuper => Self::RightSuper,
            glfw::Key::Menu => Self::Menu,
            glfw::Key::Unknown => Self::Unknown,
        }
    }
}

#[derive(Debug)]
pub enum ActionType {
    Release,
    Press,
    Repeat,
}

impl ActionType {
    pub fn from_glfw(input: glfw::Action) -> Self {
        match input {
            glfw::Action::Release => Self::Release,
            glfw::Action::Press => Self::Press,
            glfw::Action::Repeat => Self::Repeat,
        }
    }
}

bitflags! {
    #[derive(Debug)]
    pub struct KeyModifiers: ::std::os::raw::c_int {
        const Shift = 1;
        const Control = 2;
        const Alt = 3;
        const Super = 4;
        const CapsLock = 5;
        const NumLock = 6;
    }
}

#[derive(Debug)]
pub struct Key {
    pub keyboard_key: KeyboardKey,
    pub scancode: i32,
    pub action: ActionType,
    pub modifiers: Option<KeyModifiers>,
}

impl Key {
    pub fn from_glfw(
        key: glfw::Key,
        scancode: i32,
        action: glfw::Action,
        modifiers: glfw::Modifiers,
    ) -> Self {
        Self {
            keyboard_key: KeyboardKey::from_glfw(key),
            scancode,
            action: ActionType::from_glfw(action),
            modifiers: KeyModifiers::from_bits(modifiers.bits()),
        }
    }
}
